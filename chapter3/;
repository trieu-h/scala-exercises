object Exercise {
  def tail[A](l: List[A]): List[A] =
    l match {
      case Nil      => Nil
      case x :: Nil => Nil
      case x :: xs  => xs
    }

  def setHead[A](l: List[A], y: A): List[A] =
    l match {
      case Nil      => Nil
      case x :: xs  => y :: xs
    }

  def drop[A](l: List[A], n: Int): List[A] = {
    assert(l.length > n);
    l match {
      case x :: xs if n > 0  => drop(xs, n - 1)
      case _       if n == 0 => l
    }
  }

  def dropWhile[A](l: List[A])(f: A => Boolean): List[A] = {
    l match {
      case x :: xs  if f(x) == true => dropWhile(xs)(f)
      case _ => l
    }
  }

  def init[A](l: List[A]): List[A] = {
    l match {
      case x :: Nil      => Nil
      case x :: y :: Nil => x :: Nil
      case x :: xs       => x :: init(xs)
      case _             => Nil
    }
  }

  def foldRight[A,B](as: List[A], z: B)(f: (A, B) => B): B = {
    as match {
      case Nil => z
      case Cons(x, xs) => f(x, foldRight(xs, z)(f))
    }
  }

  def runDropTest(): Unit = {
    assert(drop(List(1,2,3), 1)     == List(2,3))
    assert(drop(List(2,3,4,5,6), 3) == List(5,6))
  }

  def runDropWhileTest(): Unit = {
    assert(dropWhile(List(0,0,0,1))(x => x < 1) == List(1))
    assert(dropWhile(List(1))(x => x < 1)       == List(1))
  }

  def runTailTest(): Unit = {
    assert(List(2,3) == tail((List(1,2,3))))
    assert(Nil       == tail(List(1)))
  }

  def runSetHeadTest(): Unit = {
    assert(setHead(List(1,2,3), 4) == List(4,2,3))
    assert(setHead(List(6), 9)     == List(9))
  }

  def main(args: Array[String]): Unit = {
    // runTailTest();
    // runSetHeadTest();
    // runDropTest();
    // runDropWhileTest();
  foldRight(List(1,2,3), Nil:List[Int])(Cons(_,_))
  }
}
